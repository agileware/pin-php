<?php

declare(strict_types=1);

namespace Pin\Tests\TestCase;

use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use Pin\Handler as PinHandler;
use PHPUnit\Framework\TestCase;
use Pin\Request\Base;
use Psr\Http\Message\ResponseInterface;

class TestRequest extends TestCase
{
    /**
     * @var \GuzzleHttp\Client
     */
    protected $client;

    /**
     * @var \Pin\Handler
     */
    protected $handler;

    protected function setUp(): void
    {
        $config = $this->createMock('Pin\Configuration');
        $this->handler = new PinHandler($config);
    }

    /**
     * Helper function, gets fixture contents.
     *
     * @param string $name
     *   A string matching the name of a file in the Fixture directory.
     *
     * @return mixed
     *   Whatever the fixture returns.
     */
    protected function getFixture(string $name)
    {
        $filename = sprintf('%s/Fixture/%s.php', dirname(dirname(__FILE__)), $name);
        return require_once $filename;
    }

    /**
     * Helper function, gets a JSON fixture.
     *
     * @param string $name
     *   A string matching the name of a .json file in the Fixture directory.
     *
     * @return string
     *   A JSON enconded string.
     */
    protected function getJsonFixture(string $name): string
    {
        $json = '';
        $filename = sprintf('%s/Fixture/%s.json', dirname(dirname(__FILE__)), $name);
        if (file_exists($filename)) {
            $json = file_get_contents($filename);
        }
        return $json;
    }

    /**
     * Prepares a mock request.
     *
     * @param int $status_code
     *   The expected status code.
     * @param string|null $body
     *   Optional JSON string with the response body.
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function mockResponse(int $status_code, ?string $body = null): ResponseInterface
    {
        // Set stream
        $stream = $this->createMock('Psr\Http\Message\StreamInterface');
        $stream->method('getContents')
            ->willReturn($body);

        // Set response
        $response = $this->createMock('Psr\Http\Message\ResponseInterface');
        $response->method('getStatusCode')
            ->willReturn($status_code);
        $response->method('getBody')
            ->willReturn($stream);

        return $response;
    }

    /**
     * Returns a mock version of the Guzzle HTTP client.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     *   The response to be generated by the request.
     *
     * @return \GuzzleHttp\Client
     */
    public function mockClient(ResponseInterface $response): Client
    {
        $mock = new MockHandler([$response]);
        $handler_stack = HandlerStack::create($mock);
        return new Client(['handler' => $handler_stack]);
    }

    /**
     * Prepares and executes a mock submission.
     *
     * @param string $json
     *   JSON string to be returned as body of the request.
     * @param \Pin\Request\Base $request
     *  The request to be sent.
     * @param int $status_code
     *   The HTTP status code generated by the request.
     *
     * @return object
     *   Request response object.
     */
    public function mockSubmission(string $json, Base $request, int $status_code = 200): object
    {
        $response = $this->mockResponse($status_code, $json);
        $client = $this->mockClient($response);
        $request->setHttpClient($client);
        return $this->handler->submit();
    }
}
